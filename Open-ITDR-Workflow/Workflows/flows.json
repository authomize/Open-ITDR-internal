[
    {
        "id": "fef444a29fad2f51",
        "type": "tab",
        "label": "OpenITDR Workflows",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0834077afbfa3457",
        "type": "tab",
        "label": "Okta Application Exfiltration",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "08d46d137e03e77b",
        "type": "tab",
        "label": "AWS Refactoring",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6d8d00a0454e2a65",
        "type": "tab",
        "label": "Git Repo",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0613e700cb7c2af1",
        "type": "tab",
        "label": "Pull Incident Process - Under Construction",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ec0b35b23ad2f78b",
        "type": "group",
        "z": "6d8d00a0454e2a65",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f79ad5da66e1e92c",
            "a7e8fb6872994ffc",
            "dc1e800851df685f",
            "17c6789b9587e830"
        ],
        "x": 1194,
        "y": 251.5,
        "w": 492,
        "h": 177
    },
    {
        "id": "e269a6f6f2ad800d",
        "type": "group",
        "z": "08d46d137e03e77b",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e5c5b80392f34927",
            "9c0f62c500abefd8",
            "8f5b0b852d4a04fd",
            "dcd30539602533ee",
            "51e53f00c679d5b0",
            "370c5a5fa3aaa248",
            "10545b8d384a95fe",
            "e70d5367dcf6d01d",
            "448e44463eafd654"
        ],
        "x": 1434,
        "y": 71.5,
        "w": 872,
        "h": 277
    },
    {
        "id": "1f6e1936c6fd37e4",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Authomize ITDR Okta Exfiltration Orchestration",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "true",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "bd6745d4f11d4631",
        "type": "ui_tab",
        "name": "Authomize Worker",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a7875519fe0f4de4",
        "type": "ui_group",
        "name": "Some Data To Display",
        "tab": "bd6745d4f11d4631",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ab859d17eed5c84e",
        "type": "ui_spacer",
        "z": "fef444a29fad2f51",
        "name": "spacer",
        "group": "a7875519fe0f4de4",
        "order": 1,
        "width": "1",
        "height": "1"
    },
    {
        "id": "56847a1238737895",
        "type": "ui_tab",
        "name": "Another Authomize Worker",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "63c7e8c8b974a309",
        "type": "ui_group",
        "name": "Special Data",
        "tab": "56847a1238737895",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0d91e694f55a2ff1",
        "type": "ui_group",
        "name": "Better Looking",
        "tab": "bd6745d4f11d4631",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "08356ee3b9f02222",
        "type": "debug",
        "z": "fef444a29fad2f51",
        "name": "JSON Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1880,
        "y": 420,
        "wires": []
    },
    {
        "id": "c29a0e184e0c5bb8",
        "type": "function",
        "z": "fef444a29fad2f51",
        "name": "Set Global Variables - USER TO UPDATE",
        "func": "//Setting Global Variables\n\n//AUTHOMIZE KEYS NEEDED\n//global.set(\"AuthToken\", \"atmzODEyMTExMjk2MDc6MEVaVEw4TU9RQktIT1REOVdVSEJJSlVTMUVKTkpZR1BaWFZDRU8tWUZWMA==\");\n//global.set(\"AuthToken\", \"atmzOTAwNjEzMTk1NjM6M0ZSUVlaM1hPSERNT1hVNklCUVFCWEhGV01aWUlaSEE0VVJZRE1aLVdEVw==\");\nglobal.set(\"AuthToken\", \"atmzOTIzODgxNjk4MTI6Mkk3UUlTNVFKR19BWFY1TVo0RFNDT1MyV0owRDhKNDVQUlAxVFFCVi1aQQ==\");\n\n//global.set(\"AuthomizeAPI\", \"https://apidev.authomize.com/v2/incidents/\");\nglobal.set(\"AuthomizeAPI\", \"https://api.authomize.com/v2/incidents/\");\n\n//OKTA KEYS NEEDED\nglobal.set(\"OktaAPI\", \"https://dev-50124701-admin.okta.com/api/v1/users/\");\nglobal.set(\"OktaKEY\", \"00i-bjIITHqIxaWL-AIzRSajMLFcckhdw6WdGKiHuE\");\n\n//AWS KEYS NEEDED\nglobal.set(\"aws_access_key_id\", \"AKIAUH5M2TNVPDIRJHQF\");\nglobal.set(\"aws_secret_access_key\", \"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\");\nglobal.set(\"region\", \"us-east-1\");\nglobal.set(\"output\", \"json\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 260,
        "wires": [
            [
                "ae5c549a14fdaac7"
            ]
        ]
    },
    {
        "id": "940e713d5ef8e04c",
        "type": "comment",
        "z": "fef444a29fad2f51",
        "name": "Workflow - Okta application exfiltration",
        "info": "",
        "x": 2150,
        "y": 200,
        "wires": []
    },
    {
        "id": "ae5c549a14fdaac7",
        "type": "switch",
        "z": "fef444a29fad2f51",
        "name": "Identify Incident",
        "property": "payload.data.policy.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "A new SCIM application was detected",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "Refactor AWS policy based on activities in the last 60 days.",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "Public Git repository",
                "vt": "str"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 1580,
        "y": 260,
        "wires": [
            [
                "86bea1d6d7e0dbac",
                "08356ee3b9f02222"
            ],
            [
                "f8eae5fa322188f5",
                "08356ee3b9f02222"
            ],
            [
                "9cefb787f18920f7",
                "08356ee3b9f02222"
            ],
            [
                "9c503a8895bebc72"
            ]
        ]
    },
    {
        "id": "e4c4451904f097a4",
        "type": "comment",
        "z": "fef444a29fad2f51",
        "name": "Workflow - AWS Refactoring ",
        "info": "",
        "x": 2140,
        "y": 300,
        "wires": []
    },
    {
        "id": "891d95f70256c749",
        "type": "comment",
        "z": "fef444a29fad2f51",
        "name": "Workflow - Git Repo",
        "info": "",
        "x": 2150,
        "y": 420,
        "wires": []
    },
    {
        "id": "908b76435844a24b",
        "type": "http in",
        "z": "fef444a29fad2f51",
        "name": "",
        "url": "/Data",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 260,
        "wires": [
            [
                "5b586963ee502b0b",
                "c29a0e184e0c5bb8",
                "b4bc8aa43f9789f9"
            ]
        ]
    },
    {
        "id": "5b586963ee502b0b",
        "type": "http response",
        "z": "fef444a29fad2f51",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 460,
        "y": 320,
        "wires": []
    },
    {
        "id": "86bea1d6d7e0dbac",
        "type": "link out",
        "z": "fef444a29fad2f51",
        "name": "OpenITDR-OUT-OktaExfiltration",
        "mode": "link",
        "links": [
            "23d6e9ed13904e80"
        ],
        "x": 2155,
        "y": 160,
        "wires": []
    },
    {
        "id": "f8eae5fa322188f5",
        "type": "link out",
        "z": "fef444a29fad2f51",
        "name": "OpenITDR-OUT-AwsRefactor",
        "mode": "link",
        "links": [
            "39792fd035ccb904"
        ],
        "x": 2155,
        "y": 260,
        "wires": []
    },
    {
        "id": "9cefb787f18920f7",
        "type": "link out",
        "z": "fef444a29fad2f51",
        "name": "OpenITDR-OUT-GitRepo",
        "mode": "link",
        "links": [
            "e8dfdabcd2a59fc0"
        ],
        "x": 2155,
        "y": 380,
        "wires": []
    },
    {
        "id": "142a7f130c23e9eb",
        "type": "comment",
        "z": "fef444a29fad2f51",
        "name": "WEBHOOK CONFIG: http://<yourip>/Data",
        "info": "THIS CAN BE RUN DIRECTLY FROM POSTMAN\n\nNO AUTHENTICATION WITH THIS VERSION\n\nUSE http://<your workflow node ip>/Data \n\nto configure your Authomize webhook.",
        "x": 360,
        "y": 200,
        "wires": []
    },
    {
        "id": "ccc23667cd2e9fc6",
        "type": "comment",
        "z": "fef444a29fad2f51",
        "name": "USERS - UPDATE ALL VARIABLES HERE",
        "info": "THIS CAN BE RUN DIRECTLY FROM POSTMAN\n\nNO AUTHENTICATION WITH THIS VERSION",
        "x": 1080,
        "y": 200,
        "wires": []
    },
    {
        "id": "ac4a2f97cd43339f",
        "type": "comment",
        "z": "fef444a29fad2f51",
        "name": "Use Policy Name - Switch to Workflow",
        "info": "",
        "x": 1590,
        "y": 200,
        "wires": []
    },
    {
        "id": "9c503a8895bebc72",
        "type": "debug",
        "z": "fef444a29fad2f51",
        "name": "Nothing to do - JSON Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1920,
        "y": 540,
        "wires": []
    },
    {
        "id": "b4bc8aa43f9789f9",
        "type": "debug",
        "z": "fef444a29fad2f51",
        "name": "Processed Message",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 380,
        "wires": []
    },
    {
        "id": "23d6e9ed13904e80",
        "type": "link in",
        "z": "0834077afbfa3457",
        "name": "IN-OktaExfiltration",
        "links": [
            "86bea1d6d7e0dbac"
        ],
        "x": 75,
        "y": 360,
        "wires": [
            [
                "d81f67ddb7cf1d44"
            ]
        ]
    },
    {
        "id": "6ce32a37a4a2e8fd",
        "type": "e-mail",
        "z": "0834077afbfa3457",
        "server": "mail.symutils.com",
        "port": "465",
        "secure": true,
        "tls": false,
        "name": "srileytest@symutils.com",
        "dname": "SendMail",
        "x": 840,
        "y": 420,
        "wires": []
    },
    {
        "id": "40c9be0634935af0",
        "type": "function",
        "z": "0834077afbfa3457",
        "name": "SetupMailSend",
        "func": "//Set the URL mesg before hitting the request\n//msg.url = \"https://api.authomize.com/v2/incidents/1ec844535eb59cacbaca61d6ddb3678321cdf7ff\";\n//msg.headers = {};\n//msg.headers['Authorization'] = 'atmzODEyMTExMjk2MDc6MEVaVEw4TU9RQktIT1REOVdVSEJJSlVTMUVKTkpZR1BaWFZDRU8tWUZWMA==';\n//msg.headers['Content-Type'] = 'application/json';\n\n\n//For testing only\nmsg.payload = \"The test email coming through\";\nmsg.topic = \"Node-Red test subject\";\n//msg.cc = \"sriley2169@gmail.com\";\n//msg.bcc = \"sriley@symutils.com\"\n//msg.from = \"srileytest@symutils.com\"\n\n// need to add to the payload - payload.policy.templateId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 420,
        "wires": [
            [
                "6ce32a37a4a2e8fd"
            ]
        ]
    },
    {
        "id": "d81f67ddb7cf1d44",
        "type": "function",
        "z": "0834077afbfa3457",
        "d": true,
        "name": "Get Exposed Users",
        "func": "// NOTE: THIS MAY FAIL ONCE USING REAL DATA - CHECK THIS BEFORE SWITCHING ON WEBHOOK\nlet IncidentId = msg.payload.data.id;\nflow.set(\"FlowIncident\", IncidentId);\n\nlet URL1 = global.get(\"AuthomizeAPI\");\nlet Extension = \"/extended\";\nlet URL3 = URL1 + IncidentId + Extension;\n\n//Build URL with incident ID - this will allow us to now get the users that need to be Discabled...\n//For testing only\nlet Token = global.get(\"AuthToken\");\nmsg.headers = {};\nmsg.url = URL3;\nmsg.headers['Authorization'] = Token;\nmsg.headers['Content-Type'] = 'application/json';\n\n// need to add to the payload - payload.policy.templateId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 360,
        "wires": [
            [
                "2e9019d2b25024c8",
                "40c9be0634935af0"
            ]
        ]
    },
    {
        "id": "2e9019d2b25024c8",
        "type": "http request",
        "z": "0834077afbfa3457",
        "name": "Get Exposed",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 300,
        "wires": [
            [
                "0ecc17d768088684",
                "3720743b080403fc"
            ]
        ]
    },
    {
        "id": "0ecc17d768088684",
        "type": "debug",
        "z": "0834077afbfa3457",
        "name": "Okta Output of Process",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2310,
        "y": 520,
        "wires": []
    },
    {
        "id": "3720743b080403fc",
        "type": "function",
        "z": "0834077afbfa3457",
        "name": "Incident Comment Update",
        "func": "// NOTE: THIS MAY FAIL ONCE USING REAL DATA - CHECK THIS BEFORE SWITCHING ON WEBHOOK\nlet OriginID = msg.payload.extended_information.password_exfiltration.exfiltrated_accounts[0].originId;\nflow.set(\"FlowOriginID\", OriginID);\n\nlet IncidentId = flow.get(\"FlowIncident\");\n\nlet URL1 = global.get(\"AuthomizeAPI\");\nlet Extension = \"/comments\";\nlet URL3 = URL1 + IncidentId + Extension;\n\n//Build URL with incident ID - this will allow us to now get the users that need to be Discabled...\n//For testing only\nlet Token = global.get(\"AuthToken\");\nmsg.headers = {};\nmsg.payload = {\"content\": \"OpenITDR Workflow Okta application exfiltration about to reset user password(s)\"};\nmsg.url = URL3;\nmsg.headers['Authorization'] = Token;\nmsg.headers['Content-Type'] = 'application/json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 300,
        "wires": [
            [
                "021abb9f4a394c1e"
            ]
        ]
    },
    {
        "id": "33016906142e52bb",
        "type": "http request",
        "z": "0834077afbfa3457",
        "name": "Okta Reset Password",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1660,
        "y": 300,
        "wires": [
            [
                "545b379a5228372f"
            ]
        ]
    },
    {
        "id": "021abb9f4a394c1e",
        "type": "http request",
        "z": "0834077afbfa3457",
        "name": "Update Comment",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1070,
        "y": 300,
        "wires": [
            [
                "d7c755577a760f44",
                "0ecc17d768088684"
            ]
        ]
    },
    {
        "id": "1bdfe892a035b582",
        "type": "http request",
        "z": "0834077afbfa3457",
        "name": "Update Comment",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2230,
        "y": 300,
        "wires": [
            [
                "0ecc17d768088684"
            ]
        ]
    },
    {
        "id": "d7c755577a760f44",
        "type": "function",
        "z": "0834077afbfa3457",
        "name": "Okta Reset User Password",
        "func": "\nlet OriginID = flow.get(\"FlowOriginID\");\n\nlet URL1 = global.get(\"OktaAPI\");\nlet Extension = \"/lifecycle/reset_password?sendEmail=true\";\nlet URL3 = URL1 + OriginID + Extension;\nlet Token = global.get(\"OktaKEY\");\n\n\nmsg.headers = {};\nmsg.url = URL3;\nmsg.headers['Accept'] = 'application/json';\nmsg.headers['Content-Type'] = 'application/json';\nmsg.headers['Authorization'] = 'SSWS ' + Token;\n\n// need to add to the payload - payload.policy.templateId\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 300,
        "wires": [
            [
                "33016906142e52bb"
            ]
        ]
    },
    {
        "id": "545b379a5228372f",
        "type": "function",
        "z": "0834077afbfa3457",
        "name": "Incident Comment Update",
        "func": "// NOTE: THIS MAY FAIL ONCE USING REAL DATA - CHECK THIS BEFORE SWITCHING ON WEBHOOK\nlet IncidentId = flow.get(\"FlowIncident\");\n\nlet URL1 = global.get(\"AuthomizeAPI\");\nlet Extension = \"/comments\";\nlet URL3 = URL1 + IncidentId + Extension;\n\n//Build URL with incident ID - this will allow us to now get the users that need to be Discabled...\n//For testing only\nlet Token = global.get(\"AuthToken\");\nmsg.headers = {};\nmsg.payload = {\"content\": \"OpenITDR Workflow Okta application exfiltration finished resetting password(s), close this incident\"};\nmsg.url = URL3;\nmsg.headers['Authorization'] = Token;\nmsg.headers['Content-Type'] = 'application/json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 300,
        "wires": [
            [
                "1bdfe892a035b582"
            ]
        ]
    },
    {
        "id": "39792fd035ccb904",
        "type": "link in",
        "z": "08d46d137e03e77b",
        "name": "IN-AWSRefactor",
        "links": [
            "f8eae5fa322188f5"
        ],
        "x": 105,
        "y": 500,
        "wires": [
            [
                "541f425c4266c8e0"
            ]
        ]
    },
    {
        "id": "70bbf03b366c5c25",
        "type": "http request",
        "z": "08d46d137e03e77b",
        "name": "Get Expnded Detail",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 710,
        "y": 500,
        "wires": [
            [
                "8181a569f78c996a",
                "dd2c3da5598441a6",
                "c0c3776a4c7b4e4e"
            ]
        ]
    },
    {
        "id": "541f425c4266c8e0",
        "type": "function",
        "z": "08d46d137e03e77b",
        "name": "Get Extended Refactored Policy",
        "func": "// NOTE: THIS MAY FAIL ONCE USING REAL DATA - CHECK THIS BEFORE SWITCHING ON WEBHOOK\nlet IncidentId = msg.payload.data.id;\nflow.set(\"FlowIncident\", IncidentId);\n\nlet URL1 = global.get(\"AuthomizeAPI\");\nlet Extension = \"/extended\";\nlet URL3 = URL1 + IncidentId + Extension;\n\n//Build URL with incident ID - this will allow us to find the policy...\n//For testing only\nlet Token = global.get(\"AuthToken\");\nmsg.headers = {};\nmsg.url = URL3;\nmsg.headers['Authorization'] = Token;\nmsg.headers['Content-Type'] = 'application/json';\n\n// need to add to the payload - payload.policy.templateId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 500,
        "wires": [
            [
                "70bbf03b366c5c25",
                "d58c3e9103785eb5",
                "b22ba9af01005136"
            ]
        ]
    },
    {
        "id": "8181a569f78c996a",
        "type": "function",
        "z": "08d46d137e03e77b",
        "name": "Incident Comment Update",
        "func": "//Setup Form Extended Details\nlet OrigAWSPolicy = msg.payload.extended_information.policy_refactor.originalPolicy;\nlet NewAWSPolicy = msg.payload.extended_information.policy_refactor.originalPolicy;\nlet IAMDetails = msg.payload.extended_information.entities[0].originId;\n\nflow.set(\"TheOrigAWSPolicy\", OrigAWSPolicy);\nflow.set(\"TheNewAWSPolicy\", NewAWSPolicy);\nflow.set(\"TheIAMDetails\", IAMDetails);\nflow.set(\"MyStuff\", \"arn:aws:iam::576593076267:policy-vmimportpolicy\");\n\n// let OriginID = msg.payload.extended_information.password_exfiltration.exfiltrated_accounts[0].originId;\n// flow.set(\"FlowOriginID\", OriginID);\n\nlet IncidentId = flow.get(\"FlowIncident\");\n\nlet URL1 = global.get(\"AuthomizeAPI\");\nlet Extension = \"/comments\";\nlet URL3 = URL1 + IncidentId + Extension;\n\n//Build URL with incident ID - this will allow us to now get the users that need to be Discabled...\n//For testing only\nlet Token = global.get(\"AuthToken\");\nmsg.headers = {};\nmsg.payload = {\"content\": \"OpenITDR Workflow Refactored Policy being worked on.\"};\nmsg.url = URL3;\nmsg.headers['Authorization'] = Token;\nmsg.headers['Content-Type'] = 'application/json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 500,
        "wires": [
            [
                "5f9b7e13110c9e50",
                "4a440f2be11a2243"
            ]
        ]
    },
    {
        "id": "d58c3e9103785eb5",
        "type": "function",
        "z": "08d46d137e03e77b",
        "name": "SetupMailSend",
        "func": "//Set the URL mesg before hitting the request\n//msg.url = \"https://api.authomize.com/v2/incidents/1ec844535eb59cacbaca61d6ddb3678321cdf7ff\";\n//msg.headers = {};\n//msg.headers['Authorization'] = 'atmzODEyMTExMjk2MDc6MEVaVEw4TU9RQktIT1REOVdVSEJJSlVTMUVKTkpZR1BaWFZDRU8tWUZWMA==';\n//msg.headers['Content-Type'] = 'application/json';\n\nlet TheIncident = flow.get(\"FlowIncident\");\n// For testing only\nlet MyMessage = \"Working Status: \" + msg.payload.data.status + \" | Description: \" + msg.payload.data.description + \" | Recommendation: \" + msg.payload.data.recommendation + \" | Access URL: \" + msg.payload.data.url;\nmsg.payload = MyMessage;\n// msg.payload = \"The test email coming through\";\n\nmsg.topic = \"Authomize Incident: \" + TheIncident;\n\n\nreturn msg;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 580,
        "wires": [
            [
                "60e4ad9b76f4d4c8"
            ]
        ]
    },
    {
        "id": "5f9b7e13110c9e50",
        "type": "http request",
        "z": "08d46d137e03e77b",
        "name": "Update Comment",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1330,
        "y": 460,
        "wires": [
            [
                "dd2c3da5598441a6",
                "9c0f62c500abefd8"
            ]
        ]
    },
    {
        "id": "60e4ad9b76f4d4c8",
        "type": "e-mail",
        "z": "08d46d137e03e77b",
        "server": "mail.symutils.com",
        "port": "465",
        "secure": true,
        "tls": false,
        "name": "srileytest@symutils.com",
        "dname": "SendMail",
        "x": 880,
        "y": 580,
        "wires": []
    },
    {
        "id": "cbcb5db68c4cb260",
        "type": "function",
        "z": "08d46d137e03e77b",
        "name": "Config for AWS Policy Call",
        "func": "//payload.extended_information.entities[0].originId\n//aws iam create-policy-version --policy-arn arn:aws:iam::576593076267:policy/vmimportpolicy --policy-document file://NewAWSPolicy.json --set-as-defaul\n\nlet IAMDetails = flow.get(\"TheIAMDetails\");\n\n\nmsg.payload =  \"iam create-policy-version --policy-arn \" + IAMDetails + \" --policy-document file://NewAWSPolicy.json --set-as-default\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 420,
        "wires": [
            [
                "e0c3e5a536bd5876"
            ]
        ]
    },
    {
        "id": "6312d1cc5761a683",
        "type": "function",
        "z": "08d46d137e03e77b",
        "name": "Incident Comment Update",
        "func": "// NOTE: THIS MAY FAIL ONCE USING REAL DATA - CHECK THIS BEFORE SWITCHING ON WEBHOOK\nlet IncidentId = flow.get(\"FlowIncident\");\n\nlet URL1 = global.get(\"AuthomizeAPI\");\nlet Extension = \"/comments\";\nlet URL3 = URL1 + IncidentId + Extension;\n\n//Build URL with incident ID - this will allow us to now get the users that need to be Discabled...\n//For testing only\nlet Token = global.get(\"AuthToken\");\nmsg.headers = {};\nmsg.payload = {\"content\": \"OpenITDR Workflow Refactored Policy finished resetting password(s), close this incident\"};\nmsg.url = URL3;\nmsg.headers['Authorization'] = Token;\nmsg.headers['Content-Type'] = 'application/json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 460,
        "wires": [
            [
                "71307da66b5b3003"
            ]
        ]
    },
    {
        "id": "71307da66b5b3003",
        "type": "http request",
        "z": "08d46d137e03e77b",
        "name": "Update Comment",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2390,
        "y": 460,
        "wires": [
            [
                "6bf5eab40fab6e52"
            ]
        ]
    },
    {
        "id": "6bf5eab40fab6e52",
        "type": "debug",
        "z": "08d46d137e03e77b",
        "name": "AWS Refactor Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2400,
        "y": 540,
        "wires": []
    },
    {
        "id": "b22ba9af01005136",
        "type": "debug",
        "z": "08d46d137e03e77b",
        "name": "Routed to AWS Refactor",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 680,
        "wires": []
    },
    {
        "id": "dd2c3da5598441a6",
        "type": "debug",
        "z": "08d46d137e03e77b",
        "name": "Just Before Work",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1810,
        "y": 720,
        "wires": []
    },
    {
        "id": "c0c3776a4c7b4e4e",
        "type": "function",
        "z": "08d46d137e03e77b",
        "name": "Setup to Send Attachment",
        "func": "let TheIncident = flow.get(\"FlowIncident\");\nlet OrigAWSPolicy = flow.get(\"TheOrigAWSPolicy\");\nlet NewAWSPolicy = flow.get(\"TheNewAWSPolicy\");\n\nmsg.topic = \"Authomize found policy changes: \" + TheIncident;\nmsg.payload = \"Authomize content workflow discovered the following information on AWS policies. Please see the attached files for your information.\";\nmsg.attachments = [\n    { filename: \"OriginalPolicy.txt\", content: OrigAWSPolicy },\n    { filename: \"NewAWSPolicy.txt\", content: NewAWSPolicy },\n];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 400,
        "wires": [
            [
                "743769e48511c574"
            ]
        ]
    },
    {
        "id": "743769e48511c574",
        "type": "e-mail",
        "z": "08d46d137e03e77b",
        "server": "mail.symutils.com",
        "port": "465",
        "secure": true,
        "tls": false,
        "name": "srileytest@symutils.com",
        "dname": "SendMail",
        "x": 1300,
        "y": 400,
        "wires": []
    },
    {
        "id": "e5c5b80392f34927",
        "type": "exec",
        "z": "08d46d137e03e77b",
        "g": "e269a6f6f2ad800d",
        "command": "aws",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Set AWS",
        "x": 1780,
        "y": 120,
        "wires": [
            [
                "8f5b0b852d4a04fd",
                "448e44463eafd654"
            ],
            [
                "448e44463eafd654"
            ],
            [
                "448e44463eafd654"
            ]
        ]
    },
    {
        "id": "9c0f62c500abefd8",
        "type": "function",
        "z": "08d46d137e03e77b",
        "g": "e269a6f6f2ad800d",
        "name": "Setup Args for Exec",
        "func": "//Set the keys from global record\nlet my_aws_access_key_id = global.get(\"aws_access_key_id\");\n//let my_aws_secret_access_key = global.get(\"aws_secret_access_key\");\n//let my_region = global.get(\"region\");\n//let my_output = global.get(\"output\");\n\n\n//aws configure set aws_access_key_id < yourAccessKey >\n//aws configure set aws_secret_access_key < yourSecretKey >\n// let RepoName = flow.get(\"GitRepoName\");\n// let OrgName = flow.get(\"GitOrgName\");\n\nmsg.payload = \"configure set aws_access_key_id \" + my_aws_access_key_id;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 120,
        "wires": [
            [
                "e5c5b80392f34927"
            ]
        ]
    },
    {
        "id": "8f5b0b852d4a04fd",
        "type": "function",
        "z": "08d46d137e03e77b",
        "g": "e269a6f6f2ad800d",
        "name": "Setup Args for Exec",
        "func": "//Set the keys from global record\n//let my_aws_access_key_id = global.get(\"aws_access_key_id\");\nlet my_aws_secret_access_key = global.get(\"aws_secret_access_key\");\n//let my_region = global.get(\"region\");\n//let my_output = global.get(\"output\");\n\n\n//aws configure set aws_access_key_id < yourAccessKey >\n//aws configure set aws_secret_access_key < yourSecretKey >\n// let RepoName = flow.get(\"GitRepoName\");\n// let OrgName = flow.get(\"GitOrgName\");\n\nmsg.payload = \"configure set aws_secret_access_key \" + my_aws_secret_access_key;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 180,
        "wires": [
            [
                "dcd30539602533ee"
            ]
        ]
    },
    {
        "id": "dcd30539602533ee",
        "type": "exec",
        "z": "08d46d137e03e77b",
        "g": "e269a6f6f2ad800d",
        "command": "aws",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Set AWS",
        "x": 1800,
        "y": 180,
        "wires": [
            [
                "51e53f00c679d5b0",
                "448e44463eafd654"
            ],
            [
                "448e44463eafd654"
            ],
            [
                "448e44463eafd654"
            ]
        ]
    },
    {
        "id": "51e53f00c679d5b0",
        "type": "function",
        "z": "08d46d137e03e77b",
        "g": "e269a6f6f2ad800d",
        "name": "Setup Args for Exec",
        "func": "//Set the keys from global record\n//let my_aws_access_key_id = global.get(\"aws_access_key_id\");\n//let my_aws_secret_access_key = global.get(\"aws_secret_access_key\");\nlet my_region = global.get(\"region\");\n//let my_output = global.get(\"output\");\n\n\n//aws configure set aws_access_key_id < yourAccessKey >\n//aws configure set aws_secret_access_key < yourSecretKey >\n// let RepoName = flow.get(\"GitRepoName\");\n// let OrgName = flow.get(\"GitOrgName\");\n\nmsg.payload = \"configure set region \" + my_region;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 240,
        "wires": [
            [
                "370c5a5fa3aaa248"
            ]
        ]
    },
    {
        "id": "370c5a5fa3aaa248",
        "type": "exec",
        "z": "08d46d137e03e77b",
        "g": "e269a6f6f2ad800d",
        "command": "aws",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Set AWS",
        "x": 1820,
        "y": 240,
        "wires": [
            [
                "10545b8d384a95fe",
                "448e44463eafd654"
            ],
            [
                "448e44463eafd654"
            ],
            [
                "448e44463eafd654"
            ]
        ]
    },
    {
        "id": "10545b8d384a95fe",
        "type": "function",
        "z": "08d46d137e03e77b",
        "g": "e269a6f6f2ad800d",
        "name": "Setup Args for Exec",
        "func": "//Set the keys from global record\n//let my_aws_access_key_id = global.get(\"aws_access_key_id\");\n//let my_aws_secret_access_key = global.get(\"aws_secret_access_key\");\n//let my_region = global.get(\"region\");\nlet my_output = global.get(\"output\");\n\n\n//aws configure set aws_access_key_id < yourAccessKey >\n//aws configure set aws_secret_access_key < yourSecretKey >\n// let RepoName = flow.get(\"GitRepoName\");\n// let OrgName = flow.get(\"GitOrgName\");\n\nmsg.payload = \"configure set output \" + my_output;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 300,
        "wires": [
            [
                "e70d5367dcf6d01d"
            ]
        ]
    },
    {
        "id": "e70d5367dcf6d01d",
        "type": "exec",
        "z": "08d46d137e03e77b",
        "g": "e269a6f6f2ad800d",
        "command": "aws",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Set AWS",
        "x": 1840,
        "y": 300,
        "wires": [
            [
                "448e44463eafd654",
                "cbcb5db68c4cb260"
            ],
            [
                "448e44463eafd654"
            ],
            [
                "448e44463eafd654"
            ]
        ]
    },
    {
        "id": "448e44463eafd654",
        "type": "debug",
        "z": "08d46d137e03e77b",
        "g": "e269a6f6f2ad800d",
        "name": "AWS Console Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2160,
        "y": 200,
        "wires": []
    },
    {
        "id": "63e79eed8a4da730",
        "type": "comment",
        "z": "08d46d137e03e77b",
        "name": "Setup AWS CLI environment so we can make calls and do some work",
        "info": "",
        "x": 1690,
        "y": 60,
        "wires": []
    },
    {
        "id": "e0c3e5a536bd5876",
        "type": "exec",
        "z": "08d46d137e03e77b",
        "command": "aws",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Apply new policy",
        "x": 1610,
        "y": 500,
        "wires": [
            [
                "6bf5eab40fab6e52",
                "6312d1cc5761a683"
            ],
            [
                "6bf5eab40fab6e52"
            ],
            [
                "6bf5eab40fab6e52"
            ]
        ]
    },
    {
        "id": "24ec9fef7146a462",
        "type": "file",
        "z": "08d46d137e03e77b",
        "name": "Write JSON to file",
        "filename": "./NewAWSPolicy.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 1390,
        "y": 600,
        "wires": [
            [
                "dd2c3da5598441a6"
            ]
        ]
    },
    {
        "id": "4a440f2be11a2243",
        "type": "function",
        "z": "08d46d137e03e77b",
        "name": "Setup JSON for Writing",
        "func": "\nmsg.payload = flow.get(\"TheNewAWSPolicy\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 520,
        "wires": [
            [
                "24ec9fef7146a462"
            ]
        ]
    },
    {
        "id": "e8dfdabcd2a59fc0",
        "type": "link in",
        "z": "6d8d00a0454e2a65",
        "name": "In-Git-Repo",
        "links": [
            "9cefb787f18920f7"
        ],
        "x": 45,
        "y": 520,
        "wires": [
            [
                "e44444bd43bbefd0"
            ]
        ]
    },
    {
        "id": "353bc3a41a5efbe1",
        "type": "http request",
        "z": "6d8d00a0454e2a65",
        "name": "Get Extended",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 560,
        "y": 520,
        "wires": [
            [
                "34a1829a06dcbf6a",
                "71b8f124e3076c70"
            ]
        ]
    },
    {
        "id": "57e0c3fb4470286a",
        "type": "function",
        "z": "6d8d00a0454e2a65",
        "name": "Git Repo Found",
        "func": "// NOTE: THIS MAY FAIL ONCE USING REAL DATA - CHECK THIS BEFORE SWITCHING ON WEBHOOK\nlet IncidentId = msg.payload.data.id;\nflow.set(\"FlowIncident\", IncidentId);\n\nlet URL1 = global.get(\"AuthomizeAPI\");\nlet Extension = \"/extended\";\nlet URL3 = URL1 + IncidentId + Extension;\n\n//Build URL with incident ID - this will allow us to find the policy...\n//For testing only\nlet Token = global.get(\"AuthToken\");\nmsg.headers = {};\nmsg.url = URL3;\nmsg.headers['Authorization'] = Token;\nmsg.headers['Content-Type'] = 'application/json';\n\n// need to add to the payload - payload.policy.templateId\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 520,
        "wires": [
            [
                "353bc3a41a5efbe1",
                "5323e7fadc5a5ad8"
            ]
        ]
    },
    {
        "id": "34a1829a06dcbf6a",
        "type": "function",
        "z": "6d8d00a0454e2a65",
        "name": "Incident Comment Update",
        "func": "// Get info needed for Args later in the flow (see Exec flows)\n\n// Set basic incident info\nlet IncidentId = flow.get(\"FlowIncident\");\n\n\n// setup for the API call\nlet URL1 = global.get(\"AuthomizeAPI\");\nlet Extension = \"/comments\";\nlet URL3 = URL1 + IncidentId + Extension;\n\n//Build URL with incident ID - this will allow us to now get the users that need to be Discabled...\n//For testing only\nlet Token = global.get(\"AuthToken\");\nmsg.headers = {};\nmsg.payload = {\"content\": \"OpenITDR Workflow Git Repo review being conducted.\"};\nmsg.url = URL3;\nmsg.headers['Authorization'] = Token;\nmsg.headers['Content-Type'] = 'application/json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 520,
        "wires": [
            [
                "ce54e1825f6bcb35"
            ]
        ]
    },
    {
        "id": "5323e7fadc5a5ad8",
        "type": "function",
        "z": "6d8d00a0454e2a65",
        "name": "SetupMailSend",
        "func": "//Set the URL mesg before hitting the request\n//msg.url = \"https://api.authomize.com/v2/incidents/1ec844535eb59cacbaca61d6ddb3678321cdf7ff\";\n//msg.headers = {};\n//msg.headers['Authorization'] = 'atmzODEyMTExMjk2MDc6MEVaVEw4TU9RQktIT1REOVdVSEJJSlVTMUVKTkpZR1BaWFZDRU8tWUZWMA==';\n//msg.headers['Content-Type'] = 'application/json';\n\nlet TheIncident = flow.get(\"FlowIncident\");\n// For testing only\nlet MyMessage = \"Working Status: \" + msg.payload.data.status + \" | Description: \" + msg.payload.data.description + \" | Recommendation: \" + msg.payload.data.recommendation + \" | Access URL: \" + msg.payload.data.url;\nmsg.payload = MyMessage;\n// msg.payload = \"The test email coming through\";\n\nmsg.topic = \"Authomize Incident: \" + TheIncident;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 600,
        "wires": [
            [
                "a47fa506705f3cfa"
            ]
        ]
    },
    {
        "id": "ce54e1825f6bcb35",
        "type": "http request",
        "z": "6d8d00a0454e2a65",
        "name": "Update Comment",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1010,
        "y": 440,
        "wires": [
            [
                "fec9b1e7f5f5a78d",
                "811ced318264b0c6"
            ]
        ]
    },
    {
        "id": "a47fa506705f3cfa",
        "type": "e-mail",
        "z": "6d8d00a0454e2a65",
        "server": "mail.symutils.com",
        "port": "465",
        "secure": true,
        "tls": false,
        "name": "srileytest@symutils.com",
        "dname": "SendMail",
        "x": 780,
        "y": 600,
        "wires": []
    },
    {
        "id": "0c8e8243fd3c4ee5",
        "type": "function",
        "z": "6d8d00a0454e2a65",
        "name": "Incident Comment Update",
        "func": "// NOTE: THIS MAY FAIL ONCE USING REAL DATA - CHECK THIS BEFORE SWITCHING ON WEBHOOK\nlet IncidentId = flow.get(\"FlowIncident\");\n\nlet URL1 = global.get(\"AuthomizeAPI\");\nlet Extension = \"/comments\";\nlet URL3 = URL1 + IncidentId + Extension;\n\n//Build URL with incident ID - this will allow us to now get the users that need to be Discabled...\n//For testing only\nlet Token = global.get(\"AuthToken\");\nmsg.headers = {};\nmsg.payload = {\"content\": \"OpenITDR Workflow Git Repo finished reviewing the content and sent emails, close this incident\"};\nmsg.url = URL3;\nmsg.headers['Authorization'] = Token;\nmsg.headers['Content-Type'] = 'application/json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1980,
        "y": 340,
        "wires": [
            [
                "90b6b35902e8ca65"
            ]
        ]
    },
    {
        "id": "90b6b35902e8ca65",
        "type": "http request",
        "z": "6d8d00a0454e2a65",
        "name": "Update Comment",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2310,
        "y": 340,
        "wires": [
            [
                "bde094ec1556bd26"
            ]
        ]
    },
    {
        "id": "bde094ec1556bd26",
        "type": "debug",
        "z": "6d8d00a0454e2a65",
        "name": "Public git repo Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2620,
        "y": 340,
        "wires": []
    },
    {
        "id": "fec9b1e7f5f5a78d",
        "type": "debug",
        "z": "6d8d00a0454e2a65",
        "name": "Public git repo Expanded",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 460,
        "wires": []
    },
    {
        "id": "17c6789b9587e830",
        "type": "exec",
        "z": "6d8d00a0454e2a65",
        "g": "ec0b35b23ad2f78b",
        "command": "python3",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Connect to Github",
        "x": 1570,
        "y": 380,
        "wires": [
            [
                "ef803f30b01ba80b",
                "a7e8fb6872994ffc"
            ],
            [
                "ef803f30b01ba80b"
            ],
            [
                "ef803f30b01ba80b"
            ]
        ]
    },
    {
        "id": "f79ad5da66e1e92c",
        "type": "function",
        "z": "6d8d00a0454e2a65",
        "g": "ec0b35b23ad2f78b",
        "name": "Setup Args for Exec",
        "func": "let RepoName = flow.get(\"GitRepoName\");\nlet OrgName = flow.get(\"GitOrgName\");\n\nmsg.payload = \"./workingDir/getDataFromGitHub.py -o \" + OrgName + \" -r \" + RepoName;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 380,
        "wires": [
            [
                "17c6789b9587e830"
            ]
        ]
    },
    {
        "id": "dc1e800851df685f",
        "type": "exec",
        "z": "6d8d00a0454e2a65",
        "g": "ec0b35b23ad2f78b",
        "command": "unzip",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "List Github Content",
        "x": 1570,
        "y": 300,
        "wires": [
            [
                "e02dd92b680585de",
                "2110638c40a31dbd",
                "0c8e8243fd3c4ee5"
            ],
            [
                "e02dd92b680585de"
            ],
            [
                "e02dd92b680585de"
            ]
        ]
    },
    {
        "id": "e02dd92b680585de",
        "type": "debug",
        "z": "6d8d00a0454e2a65",
        "name": "Unzip List Process",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1950,
        "y": 180,
        "wires": []
    },
    {
        "id": "ef803f30b01ba80b",
        "type": "debug",
        "z": "6d8d00a0454e2a65",
        "name": "Running Python",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1940,
        "y": 480,
        "wires": []
    },
    {
        "id": "a7e8fb6872994ffc",
        "type": "function",
        "z": "6d8d00a0454e2a65",
        "g": "ec0b35b23ad2f78b",
        "name": "Setup Args for Exec",
        "func": "let RepoName = flow.get(\"GitRepoName\");\nlet OrgName = flow.get(\"GitOrgName\");\n\nmsg.payload = \"-l ./process/git/\" + OrgName + \"-\" + RepoName + \".zip > ./process/git/content-list.txt\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 300,
        "wires": [
            [
                "dc1e800851df685f"
            ]
        ]
    },
    {
        "id": "2110638c40a31dbd",
        "type": "function",
        "z": "6d8d00a0454e2a65",
        "name": "Setup to Send Attachment",
        "func": "let TheIncident = flow.get(\"FlowIncident\");\n\nmsg.topic = \"Authomize found Content: \" + TheIncident;\nmsg.payload = \"Authomize content workflow discovered the following information on GitHub. Please see the attached file.\";\nmsg.attachments = [\n    { filename: \"content-list.txt\", path: \"./process/git/content-list.txt\" },\n    { filename: \"repositories.csv\", path: \"./process/git/repositories.csv\" },\n    //{ filename: \"textfile.txt\", content: \"is this text inside this text file?\" },\n];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1980,
        "y": 280,
        "wires": [
            [
                "dd33960bd03d5679"
            ]
        ]
    },
    {
        "id": "dd33960bd03d5679",
        "type": "e-mail",
        "z": "6d8d00a0454e2a65",
        "server": "mail.symutils.com",
        "port": "465",
        "secure": true,
        "tls": false,
        "name": "srileytest@symutils.com",
        "dname": "SendMail",
        "x": 2280,
        "y": 280,
        "wires": []
    },
    {
        "id": "78af271acafdfdb9",
        "type": "comment",
        "z": "6d8d00a0454e2a65",
        "name": "Expand the information we found to extract the Repo details",
        "info": "",
        "x": 420,
        "y": 480,
        "wires": []
    },
    {
        "id": "7b7e8b6927c2a5bf",
        "type": "comment",
        "z": "6d8d00a0454e2a65",
        "name": "Notify people that we are working a Git Repo ticket",
        "info": "",
        "x": 670,
        "y": 560,
        "wires": []
    },
    {
        "id": "2c268033b6ca0604",
        "type": "comment",
        "z": "6d8d00a0454e2a65",
        "name": "This area sets up variables and executes actions on the server",
        "info": "",
        "x": 1420,
        "y": 220,
        "wires": []
    },
    {
        "id": "4b0f396421ee2812",
        "type": "comment",
        "z": "6d8d00a0454e2a65",
        "name": "Send file attachements and comment on ticket to close it out",
        "info": "",
        "x": 2080,
        "y": 240,
        "wires": []
    },
    {
        "id": "71b8f124e3076c70",
        "type": "debug",
        "z": "6d8d00a0454e2a65",
        "name": "Public git repo Expanded",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 380,
        "wires": []
    },
    {
        "id": "e44444bd43bbefd0",
        "type": "function",
        "z": "6d8d00a0454e2a65",
        "name": "FlowVariables - USER TO UPDATE",
        "func": "//Enter the name of the org you use for Git\nflow.set(\"GitOrgName\", \"authomize\" );\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 600,
        "wires": [
            [
                "57e0c3fb4470286a"
            ]
        ]
    },
    {
        "id": "811ced318264b0c6",
        "type": "exec",
        "z": "6d8d00a0454e2a65",
        "command": "rm",
        "addpay": "",
        "append": "./process/git/*",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Clean Up Environment",
        "x": 1020,
        "y": 320,
        "wires": [
            [
                "f79ad5da66e1e92c",
                "fec9b1e7f5f5a78d"
            ],
            [
                "fec9b1e7f5f5a78d"
            ],
            [
                "fec9b1e7f5f5a78d"
            ]
        ]
    },
    {
        "id": "9c68d272eeaad571",
        "type": "inject",
        "z": "0613e700cb7c2af1",
        "name": "TimeStamp",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "30",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 600,
        "wires": [
            [
                "fe1c7e0e2434a401"
            ]
        ]
    },
    {
        "id": "fe1c7e0e2434a401",
        "type": "function",
        "z": "0613e700cb7c2af1",
        "name": "Set Global Variables - USER TO UPDATE",
        "func": "//Setting Global Variables\n//Used by all forms\n\n//global.set(\"AuthToken\", \"atmzODEyMTExMjk2MDc6MEVaVEw4TU9RQktIT1REOVdVSEJJSlVTMUVKTkpZR1BaWFZDRU8tWUZWMA==\");\nglobal.set(\"AuthToken\", \"atmzOTAwNjEzMTk1NjM6M0ZSUVlaM1hPSERNT1hVNklCUVFCWEhGV01aWUlaSEE0VVJZRE1aLVdEVw==\");\nglobal.set(\"AWSToken\", \"0987654321\");\n//global.set(\"AuthomizeAPI\", \"https://apidev.authomize.com/v2/incidents/\");\nglobal.set(\"AuthomizeAPI\", \"https://api.authomize.com/v2/incidents/\");\nglobal.set(\"AWSAPI\", \"https://apidev.authomize.com/unsure\");\nglobal.set(\"OktaAPI\", \"https://dev-50124701-admin.okta.com/api/v1/users/\");\nglobal.set(\"OktaKEY\", \"00i-bjIITHqIxaWL-AIzRSajMLFcckhdw6WdGKiHuE\");\n\n//DO NOT CHANGE THIS VALUE\nglobal.set(\"FoundIncident\", \"NULL\");\nglobal.set(\"GetOut\", \"FALSE\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 600,
        "wires": [
            [
                "acf247683e4f82ea"
            ]
        ]
    },
    {
        "id": "acf247683e4f82ea",
        "type": "function",
        "z": "0613e700cb7c2af1",
        "name": "Initial Search Incidents",
        "func": "\n// Example Path\n//payload.data[0].policy.name\n\n\nlet Token = global.get(\"AuthToken\");\nlet URL1 = global.get(\"AuthomizeAPI\");\nlet ThePayload = { filter: {\n    \"createdAt\": {\n    },\n    \"updatedAt\": {\n    },\n    \"severity\": {\n        \"$in\": [\n            \"High\"\n        ]\n    },\n    \"status\": {\n        \"$in\": [\n            \"Open\"\n        ]\n    },\n    \"isResolved\": {\n        \"$eq\": false\n    }\n},\n\"expand\": [\n    \"policy\"\n],\n    \"sort\": [\n        {\n            \"fieldName\": \"createdAt\",\n            \"order\": \"DESC\"\n        }],\n        \"pagination\": {\n    \"limit\": 10,\n        \"nextPage\": \"eyJza2lwIjogMTB9\"\n}\n};\n\n\nmsg.payload = ThePayload;\nlet URL3 = URL1 + \"search\";\nmsg.headers = {};\nmsg.url = URL3;\nmsg.headers['Authorization'] = Token;\nmsg.headers['Content-Type'] = 'application/json';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 660,
        "wires": [
            [
                "4a2688c2f04e2a2d"
            ]
        ]
    },
    {
        "id": "4a2688c2f04e2a2d",
        "type": "http request",
        "z": "0613e700cb7c2af1",
        "name": "Post Incident Search",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1080,
        "y": 660,
        "wires": [
            [
                "ba9ebabc72b7b1f1"
            ]
        ]
    },
    {
        "id": "ba9ebabc72b7b1f1",
        "type": "switch",
        "z": "0613e700cb7c2af1",
        "name": "Check Has More",
        "property": "payload.pagination.hasMore",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 920,
        "wires": [
            [
                "01720d4dbda7bb13"
            ],
            [
                "053bc070135c687c"
            ]
        ]
    },
    {
        "id": "114e56c5b959b423",
        "type": "switch",
        "z": "0613e700cb7c2af1",
        "name": "",
        "property": "GetOut",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "TRUE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FALSE",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1290,
        "y": 600,
        "wires": [
            [
                "2bbaebe6a4c5b39d"
            ],
            [
                "ba9ebabc72b7b1f1",
                "484644f734dcb0be"
            ]
        ]
    },
    {
        "id": "01720d4dbda7bb13",
        "type": "function",
        "z": "0613e700cb7c2af1",
        "name": "Get PolicyName for Routing",
        "func": "\n// Example Path\n//payload.data[0].policy.name\n\nlet TheNextPage = msg.payload.pagination.nextPage\nlet Token = global.get(\"AuthToken\");\nlet URL1 = global.get(\"AuthomizeAPI\");\nlet ThePayload = { filter: {\n    \"createdAt\": {\n    },\n    \"updatedAt\": {\n    },\n    \"severity\": {\n        \"$in\": [\n            \"High\"\n        ]\n    },\n    \"status\": {\n        \"$in\": [\n            \"Open\"\n        ]\n    },\n    \"isResolved\": {\n        \"$eq\": false\n    }\n},\n\"expand\": [\n    \"policy\"\n],\n    \"sort\": [\n        {\n            \"fieldName\": \"createdAt\",\n            \"order\": \"DESC\"\n        }],\n        \"pagination\": {\n    \"limit\":10,\n        \"nextPage\": TheNextPage\n}\n};\n\n\nmsg.payload = ThePayload;\nlet URL3 = URL1 + \"search\";\nmsg.headers = {};\nmsg.url = URL3;\nmsg.headers['Authorization'] = Token;\nmsg.headers['Content-Type'] = 'application/json';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 540,
        "wires": [
            [
                "41a43929b5a390c1"
            ]
        ]
    },
    {
        "id": "053bc070135c687c",
        "type": "function",
        "z": "0613e700cb7c2af1",
        "name": "Looking for Incident",
        "func": "\nlet myObj=msg.payload.data;\nvar myLeng = myObj.keys().length;\nglobal.set(\"WhatIs\", myLeng);\nfor (let step = 0; step < myLeng; step++) {\n    if (myObj[step].policy.name == \"User without MFA\"){\n        global.set(\"FoundIncident\", \"OKTA-SCIM\");\n        global.set(\"GlobalIncident\", myObj[step].id);\n        global.set(\"GetOut\", \"TRUE\");\n    }\n}\n\nlet myTest = global.get(\"WhatIs\");\nif (myTest == 1){global.set(\"WhatIs\",\"BIG\")}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 940,
        "wires": [
            [
                "406ce39aa544ed05"
            ]
        ]
    },
    {
        "id": "36184285c1ca3b0e",
        "type": "function",
        "z": "0613e700cb7c2af1",
        "name": "Looking for Incident",
        "func": "\nlet myObj=msg.payload.data;\nvar myLeng = myObj.keys().length;\n\nfor (let step = 0; step < myLeng; step++) {\n    if (myObj[step].policy.name == \"User without MFA\"){\n        global.set(\"FoundIncident\", \"OKTA-SCIM\");\n        global.set(\"GlobalIncident\", myObj[step].id);\n        global.set(\"GetOut\", \"TRUE\");\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 600,
        "wires": [
            [
                "114e56c5b959b423"
            ]
        ]
    },
    {
        "id": "2bbaebe6a4c5b39d",
        "type": "function",
        "z": "0613e700cb7c2af1",
        "name": "Get PolicyName for Routing",
        "func": "//This node could be dropped at some point\n//Need to think about how to Identify Incident \n\n\n//Build URL with incident ID - \n//Need this to expand the Policy detail to see\n//if we need to work on this.\nlet Token = global.get(\"AuthToken\");\n\n// NOTE: THIS MAY FAIL ONCE USING REAL DATA - CHECK THIS BEFORE SWITCHING ON WEBHOOK\nlet IncidentId = global.get(\"GlobalIncident\");\n\n\nlet URL1 = global.get(\"AuthomizeAPI\");\nlet Extension = \"?expand=policy\";\n\nlet URL3 = URL1 + IncidentId + Extension;\nmsg.headers = {};\nmsg.url = URL3;\nmsg.headers['Authorization'] = Token;\nmsg.headers['Content-Type'] = 'application/json';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 640,
        "wires": [
            [
                "453085933775da7b"
            ]
        ]
    },
    {
        "id": "484644f734dcb0be",
        "type": "debug",
        "z": "0613e700cb7c2af1",
        "name": "NOTHING IN THIS LOT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2070,
        "y": 560,
        "wires": []
    },
    {
        "id": "41a43929b5a390c1",
        "type": "http request",
        "z": "0613e700cb7c2af1",
        "name": "Post Incident Search",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1080,
        "y": 540,
        "wires": [
            [
                "36184285c1ca3b0e"
            ]
        ]
    },
    {
        "id": "406ce39aa544ed05",
        "type": "switch",
        "z": "0613e700cb7c2af1",
        "name": "",
        "property": "WhatIs",
        "propertyType": "global",
        "rules": [
            {
                "t": "cont",
                "v": "BIG",
                "vt": "str"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1630,
        "y": 940,
        "wires": [
            [
                "41f78ee233ef23ee"
            ],
            [
                "a1f299da697cdf25"
            ]
        ]
    },
    {
        "id": "41f78ee233ef23ee",
        "type": "switch",
        "z": "0613e700cb7c2af1",
        "name": "",
        "property": "GetOut",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "TRUE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FALSE",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1750,
        "y": 900,
        "wires": [
            [
                "59e61ca9ffc76e0d",
                "2bbaebe6a4c5b39d"
            ],
            [
                "a1f299da697cdf25"
            ]
        ]
    },
    {
        "id": "453085933775da7b",
        "type": "http request",
        "z": "0613e700cb7c2af1",
        "name": "Get Incident Policy",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1630,
        "y": 400,
        "wires": [
            [
                "f6179f5752b6cc53"
            ]
        ]
    },
    {
        "id": "f6179f5752b6cc53",
        "type": "switch",
        "z": "0613e700cb7c2af1",
        "name": "Identify Incident",
        "property": "FoundIncident",
        "propertyType": "global",
        "rules": [
            {
                "t": "cont",
                "v": "OKTA-SCIM",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "Refactor Azure role based on activities in the last 60 days",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "Public Git repository",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "NULL",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 1820,
        "y": 400,
        "wires": [
            [
                "c1d8fcc13513b6f6"
            ],
            [
                "919c29f3081fbe0c"
            ],
            [
                "919c29f3081fbe0c"
            ],
            [
                "484644f734dcb0be"
            ]
        ]
    },
    {
        "id": "a1f299da697cdf25",
        "type": "debug",
        "z": "0613e700cb7c2af1",
        "name": "FALSE JSON Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2040,
        "y": 960,
        "wires": []
    },
    {
        "id": "59e61ca9ffc76e0d",
        "type": "debug",
        "z": "0613e700cb7c2af1",
        "name": "TRUE JSON Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2040,
        "y": 860,
        "wires": []
    },
    {
        "id": "c1d8fcc13513b6f6",
        "type": "debug",
        "z": "0613e700cb7c2af1",
        "name": "JSON True Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2050,
        "y": 360,
        "wires": []
    },
    {
        "id": "919c29f3081fbe0c",
        "type": "debug",
        "z": "0613e700cb7c2af1",
        "name": "JSON False Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2050,
        "y": 420,
        "wires": []
    },
    {
        "id": "c172629751dc43a3",
        "type": "comment",
        "z": "0613e700cb7c2af1",
        "name": "IF LESS THAN TEN - THEN GET OUT",
        "info": "",
        "x": 1450,
        "y": 560,
        "wires": []
    },
    {
        "id": "3d0a7dd8358abb4d",
        "type": "e-mail",
        "z": "0613e700cb7c2af1",
        "server": "mail.symutils.com",
        "port": "465",
        "secure": true,
        "tls": false,
        "name": "srileytest@symutils.com",
        "dname": "Test Symutils",
        "x": 830,
        "y": 240,
        "wires": []
    },
    {
        "id": "696528ee145e616c",
        "type": "debug",
        "z": "0613e700cb7c2af1",
        "name": "JSON Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 840,
        "y": 340,
        "wires": []
    },
    {
        "id": "106b612a62a006b8",
        "type": "function",
        "z": "0613e700cb7c2af1",
        "name": "function 2",
        "func": "//msg.payload = \"The test email coming through\";\n\nlet mydata = msg.payload.data.id;\n\nmsg.topic = \"Authomize Automation on Incident: \" + mydata;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 240,
        "wires": [
            [
                "3d0a7dd8358abb4d",
                "696528ee145e616c"
            ]
        ]
    },
    {
        "id": "2a15b4ae049c579d",
        "type": "inject",
        "z": "0613e700cb7c2af1",
        "name": "Incident - Okta Exfiltration - Webhook - DEV TEST",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"data\":{\"id\":\"383df5759ffa75b8e60adee2d05f637fd93d85a9\",\"createdAt\":\"2023-02-08T15:33:52.522000+00:00\",\"updatedAt\":\"2023-02-13T13:15:58.513000+00:00\",\"entities\":[{\"id\":\"a21988bc3c2775a4fe38a186ee6089deff730aea\",\"name\":\"Offensive SCIM APP\",\"object\":\"asset\"}],\"apps\":[{\"id\":\"0348e9718f660ca652abfeeda61bc3d1730767ff\",\"name\":\"Okta - dev-50124701-admin/\"}],\"category\":\"Suspicious Behavior\",\"tactics\":[\"Defense Evasion\"],\"compliance\":[{\"values\":[\"A.8.1.1\",\"A.9.4.1\"],\"id\":\"isoIec27001\",\"name\":\"ISO/IEC 27001\"},{\"values\":[\"CC3.2\"],\"id\":\"aicpaTsc2017\",\"name\":\"SOC 2 (TSC 2017)\"}],\"techniques\":[\"Impair Defenses\"],\"status\":\"Open\",\"severity\":\"High\",\"policyId\":\"75909510838\",\"policy\":{\"id\":\"75909510838\",\"name\":\"A new SCIM application was detected\",\"templateId\":\"759094967889\"},\"assigneeId\":\"\",\"recommendation\":\"Check for any changes in the SCIM's URL value. The value can be found under: \\\"App settings\\\"/Provisioning/Integration/Base URL. monitor your app admin and enforce MFA on them.\",\"isResolved\":false,\"url\":\"https://alpacas1dev.authomize.com/incidents/383df5759ffa75b8e60adee2d05f637fd93d85a9\"}}",
        "payloadType": "json",
        "x": 250,
        "y": 240,
        "wires": [
            [
                "106b612a62a006b8"
            ]
        ]
    },
    {
        "id": "8bfe9b8f478eaeb1",
        "type": "comment",
        "z": "0613e700cb7c2af1",
        "name": "TESTING OUT MAIL",
        "info": "",
        "x": 150,
        "y": 160,
        "wires": []
    },
    {
        "id": "0bd392efe622040b",
        "type": "http request",
        "z": "0613e700cb7c2af1",
        "d": true,
        "name": "Get Incident Policy",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1310,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "395ce35ea9cce664",
        "type": "function",
        "z": "0613e700cb7c2af1",
        "d": true,
        "name": "Get PolicyName for Routing",
        "func": "//This node could be dropped at some point\n//Need to think about how to Identify Incident \n\n\n//Build URL with incident ID - \n//Need this to expand the Policy detail to see\n//if we need to work on this.\nlet Token = global.get(\"AuthToken\");\n\n// NOTE: THIS MAY FAIL ONCE USING REAL DATA - CHECK THIS BEFORE SWITCHING ON WEBHOOK\nlet IncidentId = msg.payload.data.id;\n\n\nlet URL1 = global.get(\"AuthomizeAPI\");\nlet Extension = \"?expand=policy\";\n\nlet URL3 = URL1 + IncidentId + Extension;\nmsg.headers = {};\nmsg.url = URL3;\nmsg.headers['Authorization'] = Token;\nmsg.headers['Content-Type'] = 'application/json';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 240,
        "wires": [
            [
                "0bd392efe622040b"
            ]
        ]
    }
]